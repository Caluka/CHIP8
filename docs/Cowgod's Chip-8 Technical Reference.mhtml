From: <Saved by Blink>
Snapshot-Content-Location: http://devernay.free.fr/hacks/chip8/C8TECH10.HTM
Subject: Cowgod's Chip-8 Technical Reference
Date: Sun, 21 Mar 2021 09:24:04 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--a87y5N5VEvi8MtUCrjXIGkitap2GWjaWn9kMh32FDq----"


------MultipartBoundary--a87y5N5VEvi8MtUCrjXIGkitap2GWjaWn9kMh32FDq----
Content-Type: text/html
Content-ID: <frame-2AECC11550D05039843FBA1B5DEB4540@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://devernay.free.fr/hacks/chip8/C8TECH10.HTM

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3Dwindows-1252">
		<title>Cowgod's Chip-8 Technical Reference</title>
	</head>
	<body bgcolor=3D"#FFFFFF" text=3D"#000000" link=3D"#0000FF" alink=3D"#0000=
7F" vlink=3D"#7F7F7F">
		<center>
		Cowgod's<br>
		<font size=3D"7"><strong><tt>Chip-8</tt></strong></font><br>
		Technical Reference v1.0<br>
		</center>
		<br>
		<font size=3D"4"><strong><em><u>
		<a name=3D"0.0">0.0</a> - Table of Contents&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
		</u></em></strong></font>
		<br>
		<tt><font size=3D"3">
		<strong><a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#0.0">=
0.0</a> - Table of Contents</strong><br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=3D"http://devernay.free.fr/h=
acks/chip8/C8TECH10.HTM#0.1">0.1</a> - Using This Document<br>
		<br>
		<strong><a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#1.0">=
1.0</a> - About Chip-8</strong><br>
		<br>
		<strong><a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#2.0">=
2.0</a> - Chip-8 Specifications</strong><br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=3D"http://devernay.free.fr/h=
acks/chip8/C8TECH10.HTM#2.1">2.1</a> - Memory<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#memmap">Diagram=
</a> - Memory Map<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=3D"http://devernay.free.fr/h=
acks/chip8/C8TECH10.HTM#2.2">2.2</a> - Registers<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=3D"http://devernay.free.fr/h=
acks/chip8/C8TECH10.HTM#2.3">2.3</a> - Keyboard<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#keyboard">Diagr=
am</a> - Keyboard Layout<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=3D"http://devernay.free.fr/h=
acks/chip8/C8TECH10.HTM#2.4">2.4</a> - Display<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#dispcoords">Dia=
gram</a> - Display Coordinates<br>=09
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#font">Listing</=
a> - The Chip-8 Hexadecimal Font<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=3D"http://devernay.free.fr/h=
acks/chip8/C8TECH10.HTM#2.5">2.5</a> - Timers &amp; Sound<br>=09
		<br>
		<strong><a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#3.0">=
3.0</a> - Chip-8 Instructions</strong><br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=3D"http://devernay.free.fr/h=
acks/chip8/C8TECH10.HTM#3.1">3.1</a> - Standard Chip-8 Instructions<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#00E0">00E0</a>=
 - CLS<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#00EE">00EE</a>=
 - RET<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#0nnn">0<em>nnn=
</em></a> - SYS <em>addr</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#1nnn">1<em>nnn=
</em></a> - JP <em>addr</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#2nnn">2<em>nnn=
</em></a> - CALL <em>addr</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#3xkk">3<em>xkk=
</em></a> - SE V<em>x</em>, <em>byte</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#4xkk">4<em>xkk=
</em></a> - SNE V<em>x</em>, <em>byte</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#5xy0">5<em>xy<=
/em>0</a> - SE V<em>x</em>, V<em>y</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#6xkk">6<em>xkk=
</em></a> - LD V<em>x</em>, <em>byte</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#7xkk">7<em>xkk=
</em></a> - ADD V<em>x</em>, <em>byte</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#8xy0">8<em>xy<=
/em>0</a> - LD V<em>x</em>, V<em>y</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#8xy1">8<em>xy<=
/em>1</a> - OR V<em>x</em>, V<em>y</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#8xy2">8<em>xy<=
/em>2</a> - AND V<em>x</em>, V<em>y</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#8xy3">8<em>xy<=
/em>3</a> - XOR V<em>x</em>, V<em>y</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#8xy4">8<em>xy<=
/em>4</a> - ADD V<em>x</em>, V<em>y</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#8xy5">8<em>xy<=
/em>5</a> - SUB V<em>x</em>, V<em>y</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#8xy6">8<em>xy<=
/em>6</a> - SHR V<em>x</em> {, V<em>y</em>}<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#8xy7">8<em>xy<=
/em>7</a> - SUBN V<em>x</em>, V<em>y</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#8xyE">8<em>xy<=
/em>E</a> - SHL V<em>x</em> {, V<em>y</em>}<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#9xy0">9<em>xy<=
/em>0</a> - SNE V<em>x</em>, V<em>y</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Annn">A<em>nnn=
</em></a> - LD I, <em>addr</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Bnnn">B<em>nnn=
</em></a> - JP V0, <em>addr</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Cxkk">C<em>xkk=
</em></a> - RND V<em>x</em>, <em>byte</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Dxyn">D<em>xyn=
</em></a> - DRW V<em>x</em>, V<em>y</em>, <em>nibble</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Ex9E">E<em>x</=
em>9E</a> - SKP V<em>x</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#ExA1">E<em>x</=
em>A1</a> - SKNP V<em>x</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Fx07">F<em>x</=
em>07</a> - LD V<em>x</em>, DT<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Fx0A">F<em>x</=
em>0A</a> - LD V<em>x</em>, K<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Fx15">F<em>x</=
em>15</a> - LD DT, V<em>x</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Fx18">F<em>x</=
em>18</a> - LD ST, V<em>x</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Fx1E">F<em>x</=
em>1E</a> - ADD I, V<em>x</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Fx29">F<em>x</=
em>29</a> - LD F, V<em>x</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Fx33">F<em>x</=
em>33</a> - LD B, V<em>x</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Fx55">F<em>x</=
em>55</a> - LD [I], V<em>x</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Fx65">F<em>x</=
em>65</a> - LD V<em>x</em>, [I]<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=3D"http://devernay.free.fr/h=
acks/chip8/C8TECH10.HTM#3.2">3.2</a> - Super Chip-48 Instructions<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#00Cn">00C<em>n=
</em></a> - SCD <em>nibble</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#00FB">00FB</a>=
 - SCR<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#00FC">00FC</a>=
 - SCL<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#00FD">00FD</a>=
 - EXIT<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#00FE">00FE</a>=
 - LOW<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#00FF">00FF</a>=
 - HIGH<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Dxy0">D<em>xy<=
/em>0</a> - DRW V<em>x</em>, V<em>y</em>, 0<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Fx30">F<em>x</=
em>30</a> - LD HF, V<em>x</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Fx75">F<em>x</=
em>75</a> - LD R, V<em>x</em><br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;<a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Fx85">F<em>x</=
em>85</a> - LD V<em>x</em>, R<br>

		<br>
		<strong><a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#4.0">=
4.0</a> - Interpreters</strong><br>

		<br>
		<strong><a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#5.0">=
5.0</a> - Credits</strong><br>

		</font></tt>
		<br>
		<br>

		<font size=3D"3"><strong><em><u>
		<a name=3D"0.1">0.1</a> - Using This Document&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</u></em></strong></font> <a href=3D"http://devernay.free.fr/hacks/chip8/=
C8TECH10.HTM#0.0">[TOC]</a><br>
		<br>
		<tt><font size=3D"3">
		While creating this document, I took every effort to try to make it easy =
to read, as
		well as easy to find what you're looking for.<br>
		<br>
		In most cases, where a hexadecimal value is given, it is followed by the =
equivalent
		decimal value in parenthesis. For example, "0x200 (512)."<br>
		<br>
		In most cases, when a word or letter is italicized, it is referring to a =
variable
		value, for example, if I write "V<em>x</em>," the <em>x</em> reffers to a=
 4-bit
		value.<br>
		<br>	=09
		The most important thing to remember as you read this document is that ev=
ery <a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#0.0">[TOC]<=
/a>
		link will take you back to the Table Of Contents. Also, links that you ha=
ve not yet visited
		will appear in <font color=3D"#0000FF">blue</font>, while links you have =
used will be
		<font color=3D"#7F7F7F">gray</font>.<br>
		</font></tt>
		<br>
		<br>

		<font size=3D"4"><strong><em><u>
		<a name=3D"1.0">1.0</a> - About Chip-8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;
		</u></em></strong></font> <a href=3D"http://devernay.free.fr/hacks/chip8/=
C8TECH10.HTM#0.0">[TOC]</a><br>
		<br>
		<tt><font size=3D"3">
		Whenever I mention to someone that I'm writing a Chip-8 interpreter, the =
response
		is always the same: "What's a Chip-8?"<br>
		<br>
		Chip-8 is a simple, interpreted, programming language which was first use=
d on some
		do-it-yourself computer systems in the late 1970s and early 1980s. The CO=
SMAC VIP,
		DREAM 6800, and ETI 660 computers are a few examples. These computers typ=
ically
		were designed to use a television as a display, had between 1 and 4K of R=
AM, and
		used a 16-key hexadecimal keypad for input. The interpreter took up only
		512 bytes of memory, and programs, which were entered into the computer i=
n
		hexadecimal, were even smaller.<br>
		<br>
		In the early 1990s, the Chip-8 language was revived by a man named Andrea=
s
		Gustafsson. He created a Chip-8 interpreter for the HP48 graphing calcula=
tor,=20
		called Chip-48. The HP48 was lacking a way to easily make fast games at t=
he time,
		and Chip-8 was the answer. Chip-48 later begat Super Chip-48, a modificat=
ion of
		Chip-48 which allowed higher resolution graphics, as well as other graphi=
cal
		enhancements.<br>
		<br>
		Chip-48 inspired a whole new crop of Chip-8 interpreters for various plat=
forms,
		including MS-DOS, Windows 3.1, Amiga, HP48, MSX, Adam, and ColecoVision. =
I became
		involved with Chip-8 after stumbling upon Paul Robson's interpreter on th=
e=20
		World Wide Web. Shortly after that, I began writing my own Chip-8 interpr=
eter.<br>
		<br>
		This document is a compilation of all the different sources of informatio=
n I used
		while programming my interpreter.<br>
		</font></tt>
		<br>
		<br>

		<font size=3D"4"><strong><em><u>
		<a name=3D"2.0">2.0</a> - Chip-8 Specifications&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</u></em></strong></font> <a href=3D"http://devernay.free.fr/hacks/chip8/=
C8TECH10.HTM#0.0">[TOC]</a><br>
		<br>
		<tt><font size=3D"3">
		This section describes the Chip-8 memory, registers, display, keyboard, a=
nd timers.<br>
		</font></tt>
		<br>
		<br>

		<font size=3D"3"><strong><em><u>
		<a name=3D"2.1">2.1</a> - Memory&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;
		</u></em></strong></font> <a href=3D"http://devernay.free.fr/hacks/chip8/=
C8TECH10.HTM#0.0">[TOC]</a><br>
		<br>
		<tt><font size=3D"3">
		The Chip-8 language is capable of accessing up to 4KB (4,096 bytes) of RA=
M, from=20
		location 0x000 (0) to 0xFFF (4095). The first 512 bytes, from 0x000 to 0x=
1FF, are
		where the original interpreter was located, and should not be used by pro=
grams.<br>
		<br>
		Most Chip-8 programs start at location 0x200 (512), but some begin at 0x6=
00 (1536).
		Programs beginning at 0x600 are intended for the ETI 660 computer.<br>
		<br>
		<a name=3D"memmap"><strong>Memory</strong></a><strong> Map:</strong><br>
		+---------------+=3D 0xFFF (4095) End of Chip-8 RAM<br>
		|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;|<br>
		|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;|<br>
		|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;|<br>
		|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;|<br>
		|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;|<br>
		|&nbsp;0x200 to 0xFFF|<br>
		|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chip-8&nbsp;&nbsp;&nbsp;&nbsp;|<br>
		|&nbsp;Program / Data|<br>
		|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Space&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>
		|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;|<br>
		|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;|<br>
		|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;|<br>
		+-&nbsp;-&nbsp;-&nbsp;-&nbsp;-&nbsp;-&nbsp;-&nbsp;-+=3D 0x600 (1536) Star=
t of ETI 660 Chip-8 programs<br>
		|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;|<br>
		|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;|<br>
		|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;|<br>
		+---------------+=3D 0x200 (512) Start of most Chip-8 programs<br>
		|&nbsp;0x000 to 0x1FF|<br>
		|&nbsp;Reserved for&nbsp;&nbsp;|<br>
		|&nbsp;&nbsp;interpreter&nbsp;&nbsp;|<br>
		+---------------+=3D 0x000 (0) Start of Chip-8 RAM<br>


		</font></tt>
		<br>
		<br>

		<font size=3D"3"><strong><em><u>
		<a name=3D"2.2">2.2</a> - Registers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;
		</u></em></strong></font> <a href=3D"http://devernay.free.fr/hacks/chip8/=
C8TECH10.HTM#0.0">[TOC]</a><br>
		<br>
		<tt><font size=3D"3">
		Chip-8 has 16 general purpose 8-bit registers, usually referred to as
		V<em>x</em>, where <em>x</em> is a hexadecimal digit (0 through F). There=
 is also
		a 16-bit register called I. This register is generally used to store=20
		memory addresses, so only the lowest (rightmost) 12 bits are usually used=
.<br>
		<br>
		The VF register should not be used by any program, as it is used as a fla=
g by
		some instructions. See section 3.0, <a href=3D"http://devernay.free.fr/ha=
cks/chip8/C8TECH10.HTM#3.0">Instructions</a>
		for details.<br>	=09
		<br>
		Chip-8 also has two special purpose 8-bit registers, for the delay and so=
und timers.
		When these registers are non-zero, they are automatically decremented at =
a rate=20
		of 60Hz. See the section 2.5, <a href=3D"http://devernay.free.fr/hacks/ch=
ip8/C8TECH10.HTM#2.5">Timers &amp; Sound</a>, for more
		information on these.<br>
		<br>
		There are also some "pseudo-registers" which are not accessable from Chip=
-8
		programs. The program counter (PC) should be 16-bit, and is used to store=
 the
		currently executing address. The stack pointer (SP) can be 8-bit, it is u=
sed to
		point to the topmost level of the stack.<br>
		<br>
		The stack is an array of 16 16-bit values, used to store the address that
		the interpreter shoud return to when finished with a subroutine. Chip-8 a=
llows
		for up to 16 levels of nested subroutines.<br>
		</font></tt>
		<br>
		<br>

		<font size=3D"3"><strong><em><u>
		<a name=3D"2.3">2.3</a> - Keyboard&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;
		</u></em></strong></font> <a href=3D"http://devernay.free.fr/hacks/chip8/=
C8TECH10.HTM#0.0">[TOC]</a><br>
		<br>
		<tt><font size=3D"3">
		<a name=3D"keyboard">The</a> computers which originally used the Chip-8 L=
anguage had a 16-key hexadecimal
		keypad with the following layout:<br>
		<br>
		<table border=3D"1" cellpadding=3D"3" cellspacing=3D"0" align=3D"center">
			<tbody><tr><td><tt>1</tt></td><td><tt>2</tt></td><td><tt>3</tt></td><td>=
<tt>C</tt></td></tr>
			<tr><td><tt>4</tt></td><td><tt>5</tt></td><td><tt>6</tt></td><td><tt>D</=
tt></td></tr>
			<tr><td><tt>7</tt></td><td><tt>8</tt></td><td><tt>9</tt></td><td><tt>E</=
tt></td></tr>
			<tr><td><tt>A</tt></td><td><tt>0</tt></td><td><tt>B</tt></td><td><tt>F</=
tt></td></tr>
		</tbody></table>
		<br>
		This layout must be mapped into various other configurations to fit the k=
eyboards
		of today's platforms.<br>
		</font></tt>
		<br>
		<br>

		<font size=3D"3"><strong><em><u>
		<a name=3D"2.4">2.4</a> - Display&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;
		</u></em></strong></font> <a href=3D"http://devernay.free.fr/hacks/chip8/=
C8TECH10.HTM#0.0">[TOC]</a><br>
		<br>
		<tt><font size=3D"3">
		<a name=3D"dispcoords">The</a> original implementation of the Chip-8 lang=
uage used a 64x32-pixel monochrome display
		with this format:<br>
		<br>
		<table border=3D"1" width=3D"128" height=3D"64" cellpadding=3D"0" cellspa=
cing=3D"0" align=3D"center">
			<tbody><tr><td>
				<table border=3D"0" height=3D"60" width=3D"100%">=20
					<tbody><tr><td valign=3D"top" align=3D"left">(0,0)</td><td valign=3D"t=
op" align=3D"right">(63,0)</td></tr>
					<tr><td valign=3D"bottom" align=3D"left">(0,31)</td><td valign=3D"bott=
om" align=3D"right">(63,31)</td></tr>
				</tbody></table>
			</td></tr>
		</tbody></table>
		<br>
		Some other interpreters, most notably the one on the ETI 660, also had 64=
x48 and=20
		64x64 modes. To my knowledge, no current interpreter supports these modes=
. More=20
		recently, Super Chip-48, an interpreter for the HP48 calculator, added a=
=20
		128x64-pixel mode. This mode is now supported by most of the interpreters=
 on other
		platforms.<br>
		<br>
		Chip-8 draws graphics on screen through the use of sprites. A sprite is a=
 group
		of bytes which are a binary representation of the desired picture. Chip-8=
 sprites
		may be up to 15 bytes, for a possible sprite size of 8x15.<br>
		<br>
		Programs may also refer to a group of sprites representing the hexadecima=
l=20
		digits 0 through F. These sprites are 5 bytes long, or 8x5 pixels. The da=
ta
		should be stored in the interpreter area of Chip-8 memory (0x000 to 0x1FF=
).=20
		Below is a listing of each character's bytes, in binary and hexadecimal:<=
br>
		<br>
		<a name=3D"font">&nbsp;</a>
		<table align=3D"center">
			<tbody><tr>
				<td>
					<table border=3D"1" cellpadding=3D"3" cellspacing=3D"0">
						<tbody><tr><td>"0"</td><td>Binary</td><td>Hex</td></tr>		=09
						<tr>
							<td><tt>
								****<br>
								*&nbsp;&nbsp;*<br>
								*&nbsp;&nbsp;*<br>
								*&nbsp;&nbsp;*<br>
								****<br>
							</tt></td>
							<td><tt>
								11110000<br>
								10010000<br>
								10010000<br>
								10010000<br>
								11110000<br>
							</tt></td>
							<td><tt>
								0xF0<br>
								0x90<br>
								0x90<br>
								0x90<br>
								0xF0<br>
							</tt></td>
						</tr>
					</tbody></table>
				</td>
				<td>	=09
					<table border=3D"1" cellpadding=3D"3" cellspacing=3D"0">
						<tbody><tr><td>"1"</td><td>Binary</td><td>Hex</td></tr>		=09
						<tr>
							<td><tt>
								&nbsp;&nbsp;*&nbsp;<br>
								&nbsp;**&nbsp;<br>
								&nbsp;&nbsp;*&nbsp;<br>
								&nbsp;&nbsp;*&nbsp;<br>
								&nbsp;***<br>
							</tt></td>
							<td><tt>
								00100000<br>
								01100000<br>
								00100000<br>
								00100000<br>
								01110000<br>
							</tt></td>
							<td><tt>
								0x20<br>
								0x60<br>
								0x20<br>
								0x20<br>
								0x70<br>
							</tt></td>
						</tr>
					</tbody></table>	=09
				</td>
			</tr>
			<tr>
				<td>
					<table border=3D"1" cellpadding=3D"3" cellspacing=3D"0">
						<tbody><tr><td>"2"</td><td>Binary</td><td>Hex</td></tr>		=09
						<tr>
							<td><tt>
								****<br>
								&nbsp;&nbsp;&nbsp;*<br>
								****<br>
								*&nbsp;&nbsp;&nbsp;<br>
								****<br>
							</tt></td>
							<td><tt>
								11110000<br>
								00010000<br>
								11110000<br>
								10000000<br>
								11110000<br>
							</tt></td>
							<td><tt>
								0xF0<br>
								0x10<br>
								0xF0<br>
								0x80<br>
								0xF0<br>
							</tt></td>
						</tr>
					</tbody></table>
				</td>
				<td>	=09
					<table border=3D"1" cellpadding=3D"3" cellspacing=3D"0">
						<tbody><tr><td>"3"</td><td>Binary</td><td>Hex</td></tr>		=09
						<tr>
							<td><tt>
								****<br>
								&nbsp;&nbsp;&nbsp;*<br>
								****<br>
								&nbsp;&nbsp;&nbsp;*<br>
								****<br>
							</tt></td>
							<td><tt>
								11110000<br>
								00010000<br>
								11110000<br>
								00010000<br>
								11110000<br>
							</tt></td>
							<td><tt>
								0xF0<br>
								0x10<br>
								0xF0<br>
								0x10<br>
								0xF0<br>
							</tt></td>
						</tr>
					</tbody></table>	=09
				</td>
			</tr>

			<tr>
				<td>
					<table border=3D"1" cellpadding=3D"3" cellspacing=3D"0">
						<tbody><tr><td>"4"</td><td>Binary</td><td>Hex</td></tr>		=09
						<tr>
							<td><tt>
								*&nbsp;&nbsp;*<br>
								*&nbsp;&nbsp;*<br>
								****<br>
								&nbsp;&nbsp;&nbsp;*<br>
								&nbsp;&nbsp;&nbsp;*<br>
							</tt></td>
							<td><tt>
								10010000<br>
								10010000<br>
								11110000<br>
								00010000<br>
								00010000<br>
							</tt></td>
							<td><tt>
								0x90<br>
								0x90<br>
								0xF0<br>
								0x10<br>
								0x10<br>
							</tt></td>
						</tr>
					</tbody></table>
				</td>
				<td>	=09
					<table border=3D"1" cellpadding=3D"3" cellspacing=3D"0">
						<tbody><tr><td>"5"</td><td>Binary</td><td>Hex</td></tr>		=09
						<tr>
							<td><tt>
								****<br>
								*&nbsp;&nbsp;&nbsp;<br>
								****<br>
								&nbsp;&nbsp;&nbsp;*<br>
								****<br>
							</tt></td>
							<td><tt>
								11110000<br>
								10000000<br>
								11110000<br>
								00010000<br>
								11110000<br>
							</tt></td>
							<td><tt>
								0xF0<br>
								0x80<br>
								0xF0<br>
								0x10<br>
								0xF0<br>
							</tt></td>
						</tr>
					</tbody></table>	=09
				</td>
			</tr>
			<tr>
				<td>
					<table border=3D"1" cellpadding=3D"3" cellspacing=3D"0">
						<tbody><tr><td>"6"</td><td>Binary</td><td>Hex</td></tr>		=09
						<tr>
							<td><tt>
								****<br>
								*&nbsp;&nbsp;&nbsp;<br>
								****<br>
								*&nbsp;&nbsp;*<br>
								****<br>
							</tt></td>
							<td><tt>
								11110000<br>
								10000000<br>
								11110000<br>
								10010000<br>
								11110000<br>
							</tt></td>
							<td><tt>
								0xF0<br>
								0x80<br>
								0xF0<br>
								0x90<br>
								0xF0<br>
							</tt></td>
						</tr>
					</tbody></table>
				</td>
				<td>	=09
					<table border=3D"1" cellpadding=3D"3" cellspacing=3D"0">
						<tbody><tr><td>"7"</td><td>Binary</td><td>Hex</td></tr>		=09
						<tr>
							<td><tt>
								****<br>
								&nbsp;&nbsp;&nbsp;*<br>
								&nbsp;&nbsp;*&nbsp;<br>
								&nbsp;*&nbsp;&nbsp;<br>
								&nbsp;*&nbsp;&nbsp;<br>
							</tt></td>
							<td><tt>
								11110000<br>
								00010000<br>
								00100000<br>
								01000000<br>
								01000000<br>
							</tt></td>
							<td><tt>
								0xF0<br>
								0x10<br>
								0x20<br>
								0x40<br>
								0x40<br>
							</tt></td>
						</tr>
					</tbody></table>	=09
				</td>
			</tr>

			<tr>
				<td>
					<table border=3D"1" cellpadding=3D"3" cellspacing=3D"0">
						<tbody><tr><td>"8"</td><td>Binary</td><td>Hex</td></tr>		=09
						<tr>
							<td><tt>
								****<br>
								*&nbsp;&nbsp;*<br>
								****<br>
								*&nbsp;&nbsp;*<br>
								****<br>
							</tt></td>
							<td><tt>
								11110000<br>
								10010000<br>
								11110000<br>
								10010000<br>
								11110000<br>
							</tt></td>
							<td><tt>
								0xF0<br>
								0x90<br>
								0xF0<br>
								0x90<br>
								0xF0<br>
							</tt></td>
						</tr>
					</tbody></table>
				</td>
				<td>	=09
					<table border=3D"1" cellpadding=3D"3" cellspacing=3D"0">
						<tbody><tr><td>"9"</td><td>Binary</td><td>Hex</td></tr>		=09
						<tr>
							<td><tt>
								****<br>
								*&nbsp;&nbsp;*<br>
								****<br>
								&nbsp;&nbsp;&nbsp;*<br>
								****<br>
							</tt></td>
							<td><tt>
								11110000<br>
								10010000<br>
								11110000<br>
								00010000<br>
								11110000<br>
							</tt></td>
							<td><tt>
								0xF0<br>
								0x90<br>
								0xF0<br>
								0x10<br>
								0xF0<br>
							</tt></td>
						</tr>
					</tbody></table>	=09
				</td>
			</tr>
			<tr>
				<td>
					<table border=3D"1" cellpadding=3D"3" cellspacing=3D"0">
						<tbody><tr><td>"A"</td><td>Binary</td><td>Hex</td></tr>		=09
						<tr>
							<td><tt>
								****<br>
								*&nbsp;&nbsp;*<br>
								****<br>
								*&nbsp;&nbsp;*<br>
								*&nbsp;&nbsp;*<br>
							</tt></td>
							<td><tt>
								11110000<br>
								10010000<br>
								11110000<br>
								10010000<br>
								10010000<br>
							</tt></td>
							<td><tt>
								0xF0<br>
								0x90<br>
								0xF0<br>
								0x90<br>
								0x90<br>
							</tt></td>
						</tr>
					</tbody></table>
				</td>
				<td>	=09
					<table border=3D"1" cellpadding=3D"3" cellspacing=3D"0">
						<tbody><tr><td>"B"</td><td>Binary</td><td>Hex</td></tr>		=09
						<tr>
							<td><tt>
								***&nbsp;<br>
								*&nbsp;&nbsp;*<br>
								***&nbsp;<br>
								*&nbsp;&nbsp;*<br>
								***&nbsp;<br>
							</tt></td>
							<td><tt>
								11100000<br>
								10010000<br>
								11100000<br>
								10010000<br>
								11100000<br>
							</tt></td>
							<td><tt>
								0xE0<br>
								0x90<br>
								0xE0<br>
								0x90<br>
								0xE0<br>
							</tt></td>
						</tr>
					</tbody></table>	=09
				</td>
			</tr>

			<tr>
				<td>
					<table border=3D"1" cellpadding=3D"3" cellspacing=3D"0">
						<tbody><tr><td>"C"</td><td>Binary</td><td>Hex</td></tr>		=09
						<tr>
							<td><tt>
								****<br>
								*&nbsp;&nbsp;&nbsp;<br>
								*&nbsp;&nbsp;&nbsp;<br>
								*&nbsp;&nbsp;&nbsp;<br>
								****<br>
							</tt></td>
							<td><tt>
								11110000<br>
								10000000<br>
								10000000<br>
								10000000<br>
								11110000<br>
							</tt></td>
							<td><tt>
								0xF0<br>
								0x80<br>
								0x80<br>
								0x80<br>
								0xF0<br>
							</tt></td>
						</tr>
					</tbody></table>
				</td>
				<td>	=09
					<table border=3D"1" cellpadding=3D"3" cellspacing=3D"0">
						<tbody><tr><td>"D"</td><td>Binary</td><td>Hex</td></tr>		=09
						<tr>
							<td><tt>
								***&nbsp;<br>
								*&nbsp;&nbsp;*<br>
								*&nbsp;&nbsp;*<br>
								*&nbsp;&nbsp;*<br>
								***&nbsp;<br>
							</tt></td>
							<td><tt>
								11100000<br>
								10010000<br>
								10010000<br>
								10010000<br>
								11100000<br>
							</tt></td>
							<td><tt>
								0xE0<br>
								0x90<br>
								0x90<br>
								0x90<br>
								0xE0<br>
							</tt></td>
						</tr>
					</tbody></table>	=09
				</td>
			</tr>
			<tr>
				<td>
					<table border=3D"1" cellpadding=3D"3" cellspacing=3D"0">
						<tbody><tr><td>"E"</td><td>Binary</td><td>Hex</td></tr>		=09
						<tr>
							<td><tt>
								****<br>
								*&nbsp;&nbsp;&nbsp;<br>
								****<br>
								*&nbsp;&nbsp;&nbsp;<br>
								****<br>
							</tt></td>
							<td><tt>
								11110000<br>
								10000000<br>
								11110000<br>
								10000000<br>
								11110000<br>
							</tt></td>
							<td><tt>
								0xF0<br>
								0x80<br>
								0xF0<br>
								0x80<br>
								0xF0<br>
							</tt></td>
						</tr>
					</tbody></table>
				</td>
				<td>	=09
					<table border=3D"1" cellpadding=3D"3" cellspacing=3D"0">
						<tbody><tr><td>"F"</td><td>Binary</td><td>Hex</td></tr>		=09
						<tr>
							<td><tt>
								****<br>
								*&nbsp;&nbsp;&nbsp;<br>
								****<br>
								*&nbsp;&nbsp;&nbsp;<br>
								*&nbsp;&nbsp;&nbsp;<br>
							</tt></td>
							<td><tt>
								11110000<br>
								10000000<br>
								11110000<br>
								10000000<br>
								10000000<br>
							</tt></td>
							<td><tt>
								0xF0<br>
								0x80<br>
								0xF0<br>
								0x80<br>
								0x80<br>
							</tt></td>
						</tr>
					</tbody></table>	=09
				</td>
			</tr>

		</tbody></table>
		</font></tt>
		<br>
		<br>
		<font size=3D"3"><strong><em><u>
		<a name=3D"2.5">2.5</a> - Timers &amp; Sound&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</u></em></strong></font> <a href=3D"http://devernay.free.fr/hacks/chip8/=
C8TECH10.HTM#0.0">[TOC]</a><br>
		<br>
		<tt><font size=3D"3">
		Chip-8 provides 2 timers, a delay timer and a sound timer.<br>
		<br>
		The delay timer is active whenever the delay timer register (DT) is non-z=
ero.
		This timer does nothing more than subtract 1 from the value of DT at a ra=
te
		of 60Hz. When DT reaches 0, it deactivates.<br>
		<br>
		The sound timer is active whenever the sound timer register (ST) is non-z=
ero.
		This timer also decrements at a rate of 60Hz, however, as long as ST's va=
lue is
		greater than zero, the Chip-8 buzzer will sound. When ST reaches zero, th=
e sound
		timer deactivates.<br>
		<br>
		The sound produced by the Chip-8 interpreter has only one tone. The frequ=
ency
		of this tone is decided by the author of the interpreter.<br>=20
		</font></tt>
		<br>
		<br>

		<font size=3D"4"><strong><em><u>
		<a name=3D"3.0">3.0</a> - Chip-8 Instructions&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</u></em></strong></font> <a href=3D"http://devernay.free.fr/hacks/chip8/=
C8TECH10.HTM#0.0">[TOC]</a><br>
		<br>
		<tt><font size=3D"3">
		The original implementation of the Chip-8 language includes 36 different
		instructions, including math, graphics, and flow control functions.<br>
		<br>
		Super Chip-48 added an additional	 10 instructions, for a total of 46.<br=
>
		<br>
		All instructions are 2 bytes long and are stored most-significant-byte fi=
rst.
		In memory, the first byte of each instruction should be located at an eve=
n
		addresses. If a program includes sprite data, it should be padded so any
		instructions following it will be properly situated in RAM.<br>
		<br>
		This document does not yet contain descriptions of the Super Chip-48 inst=
ructions.
		They are, however, listed below.<br>
		<br>
		In these listings, the following variables are used:<br>
		<br>
		<em>nnn</em> or <em>addr</em> - A 12-bit value, the lowest 12 bits of the=
 instruction<br>
		<em>n</em> or <em>nibble</em> - A 4-bit value, the lowest 4 bits of the i=
nstruction<br>
		<em>x</em> - A 4-bit value, the lower 4 bits of the high byte of the inst=
ruction<br>
		<em>y</em> - A 4-bit value, the upper 4 bits of the low byte of the instr=
uction<br>
		<em>kk</em> or <em>byte</em> - An 8-bit value, the lowest 8 bits of the i=
nstruction<br>
		</font></tt>
		<br>
		<br>
		<font size=3D"3"><strong><em><u>
		<a name=3D"3.1">3.1</a> - Standard Chip-8 Instructions&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</u></em></strong></font> <a href=3D"http://devernay.free.fr/hacks/chip8/=
C8TECH10.HTM#0.0">[TOC]</a><br>
		<br>
		<tt><font size=3D"3">	=09
		<strong><a name=3D"0nnn">0<em>nnn</em></a> - SYS <em>addr</em></strong><b=
r>
		Jump to a machine code routine at <em>nnn</em>.<br>
		<br>
		This instruction is only used on the old computers on which Chip-8 was or=
iginally implemented. It is ignored by modern interpreters.<br>
		<br>
		<br>

		<strong><a name=3D"00E0">00E0</a> - CLS</strong><br>
		Clear the display.<br>
		<br>
		<br>

		<strong><a name=3D"00EE">00EE</a> - RET</strong><br>
		Return from a subroutine.<br>
		<br>
		The interpreter sets the program counter to the address at the top of the
		stack, then subtracts 1 from the stack pointer.<br>
		<br>
		<br>

		<strong><a name=3D"1nnn">1<em>nnn</em></a> - JP <em><em>addr</em></em></s=
trong><br>
		Jump to location <em>nnn</em>.<br>
		<br>
		The interpreter sets the program counter to <em>nnn</em>.<br>
		<br>
		<br>

		<strong><a name=3D"2nnn">2<em>nnn</em></a> - CALL <em>addr</em></strong><=
br>
		Call subroutine at <em>nnn</em>.<br>
		<br>
		The interpreter increments the stack pointer, then puts the current PC on
		the top of the stack. The PC is then set to <em>nnn</em>.<br>
		<br>
		<br>

		<strong><a name=3D"3xkk">3<em>xkk</em></a> - SE V<em>x</em>, <em>byte</em=
></strong><br>
		Skip next instruction if V<em>x</em> =3D <em>kk</em>.<br>
		<br>
		The interpreter compares register V<em>x</em> to <em>kk</em>, and if they=
 are=20
		equal, increments the program counter by 2.<br>
		<br>
		<br>

		<strong><a name=3D"4xkk">4<em>xkk</em></a> - SNE V<em>x</em>, <em>byte</e=
m></strong><br>
		Skip next instruction if V<em>x</em> !=3D <em>kk</em>.<br>
		<br>
		The interpreter compares register V<em>x</em> to <em>kk</em>, and if they=
 are
		not equal, increments the program counter by 2.<br>
		<br>
		<br>

		<strong><a name=3D"5xy0">5<em>xy</em>0</a> - SE V<em>x</em>, V<em>y</em><=
/strong><br>
		Skip next instruction if V<em>x</em> =3D V<em>y</em>.<br>
		<br>
		The interpreter compares register V<em>x</em> to register V<em>y</em>, an=
d if=20
		they are equal, increments the program counter by 2.<br>
		<br>
		<br>

		<strong><a name=3D"6xkk">6<em>xkk</em></a> - LD V<em>x</em>, <em>byte</em=
></strong><br>
		Set V<em>x</em> =3D <em>kk</em>.<br>
		<br>
		The interpreter puts the value <em>kk</em> into register V<em>x</em>.<br>
		<br>
		<br>

		<strong><a name=3D"7xkk">7<em>xkk</em></a> - ADD V<em>x</em>, <em>byte</e=
m></strong><br>
		Set V<em>x</em> =3D V<em>x</em> + <em>kk</em>.<br>
		<br>
		Adds the value <em>kk</em> to the value of register V<em>x</em>, then sto=
res the result in V<em>x</em>.
		<br>
		<br>

		<strong><a name=3D"8xy0">8<em>xy</em>0</a> - LD V<em>x</em>, V<em>y</em><=
/strong><br>
		Set V<em>x</em> =3D V<em>y</em>.<br>
		<br>
		Stores the value of register V<em>y</em> in register V<em>x</em>.<br>
		<br>
		<br>

		<strong><a name=3D"8xy1">8<em>xy</em>1</a> - OR V<em>x</em>, V<em>y</em><=
/strong><br>
		Set Vx =3D V<em>x</em> OR V<em>y</em>.<br>
		<br>
		Performs a bitwise OR on the values of V<em>x</em> and V<em>y</em>, then =
stores the result in V<em>x</em>. A
		bitwise OR compares the corrseponding bits from two values, and if either=
 bit
		is 1, then the same bit in the result is also 1. Otherwise, it is 0. <br>
		<br>
		<br>

		<strong><a name=3D"8xy2">8<em>xy</em>2</a> - AND V<em>x</em>, V<em>y</em>=
</strong><br>
		Set V<em>x</em> =3D V<em>x</em> AND V<em>y</em>.<br>
		<br>
		Performs a bitwise AND on the values of V<em>x</em> and V<em>y</em>, then=
 stores the result in V<em>x</em>. A
		bitwise AND compares the corrseponding bits from two values, and if both =
bits
		are 1, then the same bit in the result is also 1. Otherwise, it is 0. <br=
>
		<br>
		<br>

		<strong><a name=3D"8xy3">8<em>xy</em>3</a> - XOR V<em>x</em>, V<em>y</em>=
</strong><br>
		Set V<em>x</em> =3D V<em>x</em> XOR V<em>y</em>.<br>
		<br>
		Performs a bitwise exclusive OR on the values of V<em>x</em> and V<em>y</=
em>, then stores the
		result in V<em>x</em>. An exclusive OR compares the corrseponding bits fr=
om two values,
		and if the bits are not both the same, then the corresponding bit in the =
result
		is set to 1. Otherwise, it is 0. <br>
		<br>
		<br>

		<strong><a name=3D"8xy4">8<em>xy</em>4</a> - ADD V<em>x</em>, V<em>y</em>=
</strong><br>
		Set V<em>x</em> =3D V<em>x</em> + V<em></em>y, set VF =3D carry.<br>
		<br>
		The values of V<em>x</em> and V<em>y</em> are added together. If the resu=
lt is greater than 8 bits
		(i.e., &gt; 255,) VF is set to 1, otherwise 0. Only the lowest 8 bits of =
the result
		are kept, and stored in V<em>x</em>.<br>
		<br>
		<br>

		<strong><a name=3D"8xy5">8<em>xy</em>5</a> - SUB V<em>x</em>, V<em>y</em>=
</strong><br>
		Set V<em>x</em> =3D V<em>x</em> - V<em>y</em>, set VF =3D NOT borrow.<br>
		<br>
		If V<em>x</em> &gt; V<em>y</em>, then VF is set to 1, otherwise 0. Then V=
<em>y</em> is subtracted from V<em>x</em>,
		and the results stored in V<em>x</em>.<br>
		<br>
		<br>

		<strong><a name=3D"8xy6">8<em>xy</em>6</a> - SHR V<em>x</em> {, V<em>y</e=
m>}</strong><br>
		Set V<em>x</em> =3D V<em>x</em> SHR 1.<br>
		<br>
		If the least-significant bit of V<em>x</em> is 1, then VF is set to 1, ot=
herwise 0. Then
		V<em>x</em> is divided by 2.<br>
		<br>
		<br>

		<strong><a name=3D"8xy7">8<em>xy</em>7</a> - SUBN V<em>x</em>, V<em>y</em=
></strong><br>
		Set V<em>x</em> =3D V<em>y</em> - V<em>x</em>, set VF =3D NOT borrow.<br>
		<br>
		If V<em>y</em> &gt; V<em>x</em>, then VF is set to 1, otherwise 0. Then V=
<em>x</em> is subtracted from V<em>y</em>,
		and the results stored in V<em>x</em>.<br>
		<br>
		<br>

		<strong><a name=3D"8xyE">8<em>xy</em>E</a> - SHL V<em>x</em> {, V<em>y</e=
m>}</strong><br>
		Set V<em>x</em> =3D V<em>x</em> SHL 1.<br>
		<br>
		If the most-significant bit of Vx is 1, then VF is set to 1, otherwise to=
 0. Then
		V<em>x</em> is multiplied by 2.<br>
		<br>
		<br>

		<strong><a name=3D"9xy0">9<em>xy</em>0</a> - SNE V<em>x</em>, V<em>y</em>=
</strong><br>
		Skip next instruction if V<em>x</em> !=3D V<em>y</em>.<br>
		<br>
		The values of V<em>x</em> and V<em>y</em> are compared, and if they are n=
ot equal, the program
		counter is increased by 2.<br>
		<br>
		<br>

		<strong><a name=3D"Annn">A<em>nnn</em></a> - LD I, <em>addr</em></strong>=
<br>
		Set I =3D <em>nnn</em>.<br>
		<br>
		The value of register I is set to <em>nnn</em>.<br>
		<br>
		<br>

		<strong><a name=3D"Bnnn">B<em>nnn</em></a> - JP V0, <em>addr</em></strong=
><br>
		Jump to location <em>nnn</em> + V0.<br>
		<br>
		The program counter is set to <em>nnn</em> plus the value of V0.<br>
		<br>
		<br>

		<strong><a name=3D"Cxkk">C<em>xkk</em></a> - RND V<em>x</em>, <em>byte</e=
m></strong><br>
		Set V<em>x</em> =3D random <em>byte</em> AND <em>kk</em>.<br>
		<br>
		The interpreter generates a random number from 0 to 255, which is then AN=
Ded
		with the value kk. The results are stored in V<em>x</em>. See instruction=
 <a href=3D"http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#8xy2">8<em>xy<=
/em>2</a>
		for more information on AND.<br>
		<br>
		<br>

		<strong><a name=3D"Dxyn">D<em>xyn</em></a> - DRW V<em>x</em>, V<em>y</em>=
, <em>nibble</em></strong><br>
		Display <em>n</em>-byte sprite starting at memory location I at (V<em>x</=
em>, V<em>y</em>), set VF =3D collision.<br>
		<br>
		The interpreter reads <em>n</em> bytes from memory, starting at the addre=
ss stored in
		I. These bytes are then displayed as sprites on screen at coordinates (V<=
em>x</em>, V<em>y</em>).
		Sprites are XORed onto the existing screen. If this causes any pixels to =
be
		erased, VF is set to 1, otherwise it is set to 0. If the sprite is positi=
oned
		so part of it is outside the coordinates of the display, it wraps around =
to
		the opposite side of the screen. See instruction <a href=3D"http://devern=
ay.free.fr/hacks/chip8/C8TECH10.HTM#8xy3">8<em>xy</em>3</a> for
		more information on XOR, and section 2.4, <a href=3D"http://devernay.free=
.fr/hacks/chip8/2.4">Display</a>, for
		more information on the Chip-8 screen and sprites.<br>
		<br>
		<br>

		<strong><a name=3D"Ex9E">E<em>x</em>9E</a> - SKP V<em>x</em></strong><br>
		Skip next instruction if key with the value of V<em>x</em> is pressed.<br=
>
		<br>
		Checks the keyboard, and if the key corresponding to the value of V<em>x<=
/em> is currently
		in the down position, PC is increased by 2.<br>
		<br>
		<br>

		<strong><a name=3D"ExA1">E<em>x</em>A1</a> - SKNP V<em>x</em></strong><br=
>
		Skip next instruction if key with the value of V<em>x</em> is not pressed=
.<br>
		<br>
		Checks the keyboard, and if the key corresponding to the value of V<em>x<=
/em> is currently
		in the up position, PC is increased by 2.<br>
		<br>
		<br>

		<strong><a name=3D"Fx07">F<em>x</em>07</a> - LD V<em>x</em>, DT</strong><=
br>
		Set V<em>x</em> =3D delay timer value.<br>
		<br>
		The value of DT is placed into V<em>x</em>.<br>
		<br>
		<br>

		<strong><a name=3D"Fx0A">F<em>x</em>0A</a> - LD V<em>x</em>, K</strong><b=
r>
		Wait for a key press, store the value of the key in V<em>x</em>.<br>
		<br>
		All execution stops until a key is pressed, then the value of that key
		is stored in V<em>x</em>.<br>
		<br>
		<br>

		<strong><a name=3D"Fx15">F<em>x</em>15</a> - LD DT, V<em>x</em></strong><=
br>
		Set delay timer =3D V<em>x</em>.<br>
		<br>
		DT is set equal to the value of V<em>x</em>.<br>
		<br>
		<br>

		<strong><a name=3D"Fx18">F<em>x</em>18</a> - LD ST, V<em>x</em></strong><=
br>
		Set sound timer =3D V<em>x</em>.<br>
		<br>
		ST is set equal to the value of V<em>x</em>.<br>
		<br>
		<br>

		<strong><a name=3D"Fx1E">F<em>x</em>1E</a> - ADD I, V<em>x</em></strong><=
br>
		Set I =3D I + V<em>x</em>.<br>
		<br>
		The values of I and V<em>x</em> are added, and the results are stored in =
I.<br>
		<br>
		<br>

		<strong><a name=3D"Fx29">F<em>x</em>29</a> - LD F, V<em>x</em></strong><b=
r>
		Set I =3D location of sprite for digit V<em>x</em>.<br>
		<br>
		The value of I is set to the location for the hexadecimal sprite correspo=
nding to
		the value of V<em>x</em>. See section 2.4, <a href=3D"http://devernay.fre=
e.fr/hacks/chip8/C8TECH10.HTM#2.4">Display</a>, for more information
		on the Chip-8 hexadecimal font.<br>
		<br>
		<br>

		<strong><a name=3D"Fx33">F<em>x</em>33</a> - LD B, V<em>x</em></strong><b=
r>
		Store BCD representation of V<em>x</em> in memory locations I, I+1, and I=
+2.<br>
		<br>
		The interpreter takes the decimal value of V<em>x</em>, and places the hu=
ndreds
		digit in memory at location in I, the tens digit at location I+1, and the
		ones digit at location I+2.<br>
		<br>
		<br>

		<strong><a name=3D"Fx55">F<em>x</em>55</a> - LD [I], V<em>x</em></strong>=
<br>
		Store registers V0 through V<em>x</em> in memory starting at location I.<=
br>
		<br>
		The interpreter copies the values of registers V0 through V<em>x</em> int=
o memory,
		starting at the address in I.<br>
		<br>
		<br>

		<strong><a name=3D"Fx65">F<em>x</em>65</a> - LD V<em>x</em>, [I]</strong>=
<br>
		Read registers V0 through V<em>x</em> from memory starting at location I.=
<br>
		<br>
		The interpreter reads values from memory starting at location I into regi=
sters
		V0 through V<em>x</em>.<br>
		<br>
		<br>

		</font></tt>
		<font size=3D"3"><strong><em><u>
		<a name=3D"3.2">3.2</a> - Super Chip-48 Instructions&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</u></em></strong></font> <a href=3D"http://devernay.free.fr/hacks/chip8/=
C8TECH10.HTM#0.0">[TOC]</a><br>
		<br>
		<tt><font size=3D"3">=09
		<strong><a name=3D"00Cn">00C<em>n</em></a> - SCD <em>nibble</em></strong>=
<br>
		<strong><a name=3D"00FB">00FB</a> - SCR</strong><br>
		<strong><a name=3D"00FC">00FC</a> - SCL</strong><br>
		<strong><a name=3D"00FD">00FD</a> - EXIT</strong><br>
		<strong><a name=3D"00FE">00FE</a> - LOW</strong><br>
		<strong><a name=3D"00FF">00FF</a> - HIGH</strong><br>
		<strong><a name=3D"Dxy0">D<em>xy</em>0</a> - DRW V<em>x</em>, V<strong>y<=
/strong>, 0</strong><br>
		<strong><a name=3D"Fx30">F<em>x</em>30</a> - LD HF, V<em>x</em></strong><=
br>
		<strong><a name=3D"Fx75">F<em>x</em>75</a> - LD R, V<em>x</em></strong><b=
r>
		<strong><a name=3D"Fx85">F<em>x</em>85</a> - LD V<em>x</em>, R</strong><b=
r>
		<br>
		<br>
		<br>

		</font></tt>
							<font size=3D"4"><strong><em><u>
		<a name=3D"4.0">4.0</a> - Interpreters&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;
		</u></em></strong></font> <a href=3D"http://devernay.free.fr/hacks/chip8/=
C8TECH10.HTM#0.0">[TOC]</a><br>
		<br>
		<tt><font size=3D"3">
		Below is a list of every Chip-8 interpreter I could find on the World Wid=
e Web:<br>
		<br>
		<table border=3D"1" cellspacing=3D"0" cellpadding=3D"3" align=3D"center">
			<tbody><tr>
				<td><strong>Title</strong></td>
				<td><strong>Version</strong></td>
				<td><strong>Author</strong></td>
				<td><strong>Platform(s)</strong></td>
			</tr>
			<tr>
				<td>Chip-48</td>
				<td>2.20</td>
				<td>Anrdreas Gustafsson</td>
				<td>HP48</td>
			</tr>
			<tr>
				<td>Chip8</td>
				<td>1.1</td>
				<td>Paul Robson</td>
				<td>DOS</td>
			</tr>
			<tr>
				<td>Chip-8 Emulator</td>
				<td>2.0.0</td>
				<td>David Winter</td>
				<td>DOS</td>
			</tr>
			<tr>
				<td>CowChip</td>
				<td>0.1</td>
				<td>Thomas P. Greene</td>
				<td>Windows 3.1</td>
			</tr>
			<tr>
				<td>DREAM MON</td>
				<td>1.1</td>
				<td>Paul Hayter</td>
				<td>Amiga</td>
			</tr>
			<tr>
				<td>Super Chip-48</td>
				<td>1.1</td>
				<td>Based on Chip-48, modified by Erik Bryntse</td>
				<td>HP48</td>
			</tr>
			<tr>
				<td>Vision-8</td>
				<td>1.0</td>
				<td>Marcel de Kogel</td>
				<td>DOS, Adam, MSX, ColecoVision</td>
			</tr>
		</tbody></table>
		</font></tt>
		<br>
		<br>

		<font size=3D"4"><strong><em><u>
		<a name=3D"5.0">5.0</a> - Credits&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;
		</u></em></strong></font> <a href=3D"http://devernay.free.fr/hacks/chip8/=
C8TECH10.HTM#0.0">[TOC]</a><br>
		<br>
		<tt><font size=3D"3">
		This document was compiled by <a href=3D"mailto:cowgod@rockpile.com">Thom=
as P. Greene</a>.<br>
		<br>
		<strong>Sources include:</strong><br>
		<ul>
			<li>My own hacking.</li>
			<li>E-mail between David Winter and myself.</li>
			<li>David Winter's <u>Chip-8 Emulator</u> documentation.</li>
			<li>Christian Egeberg's <u>Chipper</u> documentation.</li>
			<li>Marcel de Kogel's <u>Vision-8</u> source code.</li>
			<li>Paul Hayter's <u>DREAM MON</u> documentation.</li>
			<li>Paul Robson's web page.</li>
			<li>Andreas Gustafsson's <u>Chip-48</u> documentation.</li>
		</ul>
		</font></tt>
		<br>
		<br>
		<br>
		<font size=3D"2"><tt>August 30, 1997 06:00:00</tt></font>
=09
</body></html>
------MultipartBoundary--a87y5N5VEvi8MtUCrjXIGkitap2GWjaWn9kMh32FDq------
